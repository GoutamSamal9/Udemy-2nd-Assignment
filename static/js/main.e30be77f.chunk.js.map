{"version":3,"sources":["Char/Char.js","Validation/Validation.js","App.js","reportWebVitals.js","index.js"],"names":["Char","props","style","display","padding","margin","border","textAlign","onClick","clicked","character","Validation","validationMessage","inputLength","App","state","userInput","deleteCharHandler","index","text","split","splice","updatedText","join","setState","inputChangeHandler","event","target","value","charList","this","map","ch","className","type","onChange","length","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAkBeA,G,MAhBF,SAACC,GASZ,OACE,qBAAKC,MATO,CACZC,QAAS,eACTC,QAAS,OACTC,OAAQ,OACRC,OAAQ,kBACRC,UAAW,UAIQC,QAASP,EAAMQ,QAAlC,SACGR,EAAMS,cCGEC,MAdf,SAAoBV,GAClB,IAAIW,EAAoB,mBAMxB,OAJIX,EAAMY,aAAe,IACvBD,EAAoB,qBAIpB,8BACE,4BAAIA,OCsCKE,E,4MA3CbC,MAAQ,CACNC,UAAW,I,EAGbC,kBAAoB,SAACC,GACnB,IAAMC,EAAO,EAAKJ,MAAMC,UAAUI,MAAM,IACxCD,EAAKE,OAAOH,EAAO,GACnB,IAAMI,EAAcH,EAAKI,KAAK,IAC9B,EAAKC,SAAS,CAAER,UAAWM,K,EAG7BG,mBAAqB,SAACC,GACpB,EAAKF,SAAS,CACZR,UAAWU,EAAMC,OAAOC,S,uDAIlB,IAAD,OACDC,EAAWC,KAAKf,MAAMC,UAAUI,MAAM,IAAIW,KAAI,SAACC,EAAId,GACvD,OACE,cAAC,EAAD,CACER,UAAWsB,EAEXvB,QAAS,kBAAM,EAAKQ,kBAAkBC,KADjCA,MAMX,OACE,sBAAKe,UAAU,MAAf,UACE,uBACEC,KAAK,OACLC,SAAUL,KAAKL,mBACfG,MAAOE,KAAKf,MAAMC,YAEpB,4BAAIc,KAAKf,MAAMC,YACf,cAAC,EAAD,CAAYH,YAAaiB,KAAKf,MAAMC,UAAUoB,SAE7CP,S,GAvCSQ,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e30be77f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Char = (props) => {\r\n  const style = {\r\n    display: \"inline-block\",\r\n    padding: \"16px\",\r\n    margin: \"16px\",\r\n    border: \"1px solid black\",\r\n    textAlign: \"center\",\r\n  };\r\n\r\n  return (\r\n    <div style={style} onClick={props.clicked}>\r\n      {props.character}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Char;\r\n","import React from \"react\";\r\n\r\nfunction Validation(props) {\r\n  let validationMessage = \"Text is too long\";\r\n\r\n  if (props.inputLength <= 5) {\r\n    validationMessage = \"Text is too short\";\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>{validationMessage}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Validation;\r\n\r\n// import React from \"react\";\r\n\r\n// const Validation = (props) => {\r\n//   let validationMessage = \"Text Long enough!\";\r\n\r\n//   if (props.inputLength <= 5) {\r\n//     validationMessage = \"Text too short\";\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <p>{validationMessage}</p>\r\n//     </div>\r\n//   );\r\n// };\r\n// export default Validation;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Char from \"./Char/Char\";\nimport Validation from \"./Validation/Validation\";\n\nclass App extends Component {\n  state = {\n    userInput: \"\",\n  };\n\n  deleteCharHandler = (index) => {\n    const text = this.state.userInput.split(\"\");\n    text.splice(index, 1);\n    const updatedText = text.join(\"\");\n    this.setState({ userInput: updatedText });\n  };\n\n  inputChangeHandler = (event) => {\n    this.setState({\n      userInput: event.target.value,\n    });\n  };\n\n  render() {\n    const charList = this.state.userInput.split(\"\").map((ch, index) => {\n      return (\n        <Char\n          character={ch}\n          key={index}\n          clicked={() => this.deleteCharHandler(index)}\n        />\n      );\n    });\n\n    return (\n      <div className=\"App\">\n        <input\n          type=\"text\"\n          onChange={this.inputChangeHandler}\n          value={this.state.userInput}\n        />\n        <p>{this.state.userInput}</p>\n        <Validation inputLength={this.state.userInput.length} />\n\n        {charList}\n      </div>\n    );\n  }\n}\nexport default App;\n\n// import React, { Component } from \"react\";\n// import \"./App.css\";\n// import Char from \"./Char/Char\";\n// import Validation from \"./Validation/Validation\";\n\n// class App extends Component {\n//   state = {\n//     userInput: \"\",\n//   };\n\n//   inputChangedHandler = (event) => {\n//     this.setState({ userInput: event.target.value });\n//   };\n\n//   deleteCharHandler = (index) => {\n//     const text = this.state.userInput.split(\"\");\n//     text.splice(index, 1);\n//     const updatedText = text.join(\"\");\n//     this.setState({ userInput: updatedText });\n//   };\n\n//   render() {\n//     const charList = this.state.userInput.split(\"\").map((ch, index) => {\n//       return (\n//         <Char\n//           character={ch}\n//           key={index}\n//           clicked={() => this.deleteCharHandler(index)}\n//         />\n//       );\n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <input\n//           onChange={this.inputChangedHandler}\n//           value={this.state.userInput}\n//         />\n//         <p>{this.state.userInput}</p>\n//         <Validation inputLength={this.state.userInput.length} />\n//         {charList}\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}